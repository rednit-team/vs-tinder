{"version":3,"sources":[".././src/SidebarProvider.ts",".././src/extension.ts",".././src/getNonce.ts","../external \"vscode\"","../webpack/bootstrap","../webpack/startup"],"names":[],"mappings":"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","file":"extension.js","sourcesContent":["import * as vscode from \"vscode\";\r\nimport { getNonce } from \"./getNonce\";\r\n\r\nexport class SidebarProvider {\r\n\r\n  constructor(private readonly _extensionUri: vscode.Uri) { }\r\n\r\n  public resolveWebviewView(webviewView: vscode.WebviewView) {\r\n    webviewView.webview.html = this._getHtmlForWebview(webviewView.webview);\r\n  }\r\n\r\n  private _getHtmlForWebview(webview: vscode.Webview) {\r\n    const styleResetUri = webview.asWebviewUri(\r\n      vscode.Uri.joinPath(this._extensionUri, \"media\", \"reset.css\")\r\n    );\r\n    const styleVSCodeUri = webview.asWebviewUri(\r\n      vscode.Uri.joinPath(this._extensionUri, \"media\", \"vscode.css\")\r\n    );\r\n\r\n    // Use a nonce to only allow a specific script to be run.\r\n    const nonce = getNonce();\r\n\r\n    return `<!DOCTYPE html>\r\n\t\t\t<html lang=\"en\">\r\n\t\t\t<head>\r\n\t\t\t\t<meta charset=\"UTF-8\">\r\n\t\t\t\t<!--\r\n\t\t\t\t\tUse a content security policy to only allow loading images from https or from our extension directory,\r\n\t\t\t\t\tand only allow scripts that have a specific nonce.\r\n        -->\r\n        <meta http-equiv=\"Content-Security-Policy\" content=\" img-src https: data:; style-src 'unsafe-inline' ${webview.cspSource\r\n      }; script-src 'nonce-${nonce}';\">\r\n\t\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n\t\t\t\t<link href=\"${styleResetUri}\" rel=\"stylesheet\">\r\n\t\t\t\t<link href=\"${styleVSCodeUri}\" rel=\"stylesheet\">\r\n\t\t\t</head>\r\n      <body>\r\n        <h1>Please provide an auth token to continue</h1>\r\n        <br>\r\n\t\t\t\t<input id=\"token\" type=\"text\" placeholder=\"X-Auth-Token\">\r\n        <br>\r\n        <button type=\"button\">Continue</button>\r\n\t\t\t</body>\r\n\t\t\t</html>`;\r\n  }\r\n}\r\n","// The module 'vscode' contains the VS Code extensibility API\r\n// Import the module and reference it with the alias vscode in your code below\r\nimport * as vscode from \"vscode\";\r\nimport { SidebarProvider } from \"./SidebarProvider\";\r\n\r\n// this method is called when your extension is activated\r\n// your extension is activated the very first time the command is executed\r\nexport function activate(context: vscode.ExtensionContext) {\r\n  const sidebarProvider = new SidebarProvider(context.extensionUri);\r\n  context.subscriptions.push(\r\n    vscode.window.registerWebviewViewProvider(\r\n      \"vstinder-sidebar\",\r\n      sidebarProvider\r\n    )\r\n  );\r\n\r\n  context.subscriptions.push(\r\n    vscode.commands.registerCommand(\"vstinder.reloadSidebar\", async () => {\r\n      await vscode.commands.executeCommand(\"workbench.action.closeSidebar\");\r\n      await vscode.commands.executeCommand(\r\n        \"workbench.view.extension.vstinder-sidebar-view\"\r\n      );\r\n      setTimeout(() => {\r\n        vscode.commands.executeCommand(\r\n          \"workbench.action.webview.openDeveloperTools\"\r\n        );\r\n      }, 500);\r\n      // SwiperPanel.kill();\r\n      // SwiperPanel.createOrShow(context.extensionUri);\r\n      // if (sidebarProvider._view) {\r\n      //   sidebarProvider.resolveWebviewView(sidebarProvider._view);\r\n      // }\r\n    })\r\n  );\r\n\r\n  context.subscriptions.push(\r\n    vscode.commands.registerCommand(\"vstinder.addCodeToProfile\", async () => {\r\n      const { activeTextEditor } = vscode.window;\r\n      if (!activeTextEditor) {\r\n        vscode.window.showErrorMessage(\"I don't see any code\");\r\n        return;\r\n      }\r\n      let text = activeTextEditor.document.getText(activeTextEditor.selection);\r\n      if (!text) {\r\n        text = activeTextEditor.document.getText();\r\n      }\r\n\r\n      if (!text) {\r\n        vscode.window.showErrorMessage(`I couldn't get any code`);\r\n        return;\r\n      }\r\n\r\n      if (text.length > 600) {\r\n        text = text.slice(0, 600);\r\n        vscode.window.showWarningMessage(\r\n          `Only taking the first 600 characters`\r\n        );\r\n      }\r\n      const languageId = activeTextEditor.document.languageId;\r\n\r\n      await vscode.commands.executeCommand(\r\n        \"workbench.view.extension.vstinder-sidebar-view\"\r\n      );\r\n    })\r\n  );\r\n}\r\n\r\n// this method is called when your extension is deactivated\r\nexport function deactivate() { }\r\n","export function getNonce() {\r\n  let text = \"\";\r\n  const possible =\r\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n  for (let i = 0; i < 32; i++) {\r\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n  }\r\n  return text;\r\n}\r\n","module.exports = require(\"vscode\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/extension.ts\");\n"],"sourceRoot":""}